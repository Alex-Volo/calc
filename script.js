'use strict';
/*    
   6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
   6.1. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä 16 +
   6.2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ï—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–ª–∏–Ω–Ω—É –≤ 16
   —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ –≤ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ +

   8. –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏, —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ */

const form = document.querySelector('.calculator');
const calculatorInput = document.querySelector('.calculator__input');
const containerFirstNumber = document.querySelector('.calculator__valueA');

form.addEventListener('click', (e) => {
    const digitKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.',];
    const funcKeys = ['+', '/', '*', '-',];
    const oneActionKeys = ['C', '%', '¬±', 'ü†ê', '‚àö', '=',];

    const keyPressed = e.target.textContent;

    // –¶–∏—Ñ—Ä–æ–≤–æ–π –±–ª–æ–∫

    if (digitKeys.includes(keyPressed)) {
        switch (true) {

            case (calculator.isAfterEqual): {
                if (calculator.firstNumber.length < 17) {
                    calculator.firstNumber = calculator.secondNumber = calculatorInput.value = '';
                    calculator.isFirstNumber = true;
                    calculator.isAfterEqual = false;

                    calculator.firstNumber = calculatorInput.value += keyPressed;
                    calculator.renderFirstNumber();
                }
                break;
            }

            case (calculator.isFirstNumber): {
                if (calculator.firstNumber.length < 17) {
                    calculator.firstNumber = calculatorInput.value += keyPressed;
                    calculator.renderFirstNumber();
                }
                break;
            }

            default: {
                if (calculator.secondNumber.length < 17) {
                    calculator.secondNumber += keyPressed;
                    calculatorInput.value += keyPressed;
                }
                break;
            }
        }
        // –ï—Å–ª–∏ –Ω–∞–∂–∏–º–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–æ —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–µ–ß–∏—Å–ª–æ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ false
    } else if (funcKeys.includes(keyPressed)) {
        if (isNaN(calculator.firstNumber)) {
            calculator.firstNumber = calculator.secondNumber = calculatorInput.value = '';
            calculator.renderFirstNumber();
        } else if (calculator.isAfterEqual) {
            calculator.isFirstNumber = true;
            calculatorInput.value += keyPressed;
            calculator[keyPressed]();
            calculator.isFirstNumber = false;
            calculator.isAfterEqual = false;
        } else {
            calculatorInput.value += keyPressed;
            calculator[keyPressed]();
            calculator.isFirstNumber = false;
            calculator.isAfterEqual = false;
        }

    } else if (oneActionKeys.includes(keyPressed)) {
        calculator[keyPressed]();
    }
})

const calculator = {
    firstNumber: '',
    secondNumber: '',
    result: 0,
    isFirstNumber: true,
    isAfterEqual: false,
    nextOperation: () => '',

    renderFirstNumber: function () {
        containerFirstNumber.textContent = `=${this.firstNumber}`
    },

    fixResult: function (result) {
        if (isNaN(result)) {
            return result;
        } else {
            const fixedResult = parseFloat(result.toFixed(8));
            if (fixedResult.toString().length < 17) {
                return fixedResult
            } else {
                return fixedResult.toExponential(10);
            }
        }
    },

    'C': function () {
        this.firstNumber = this.secondNumber = calculatorInput.value = '';
        this.isFirstNumber = true;
        this.renderFirstNumber();
        this.nextOperation = () => '';
    },

    '¬±': function () {
        this.firstNumber = calculatorInput.value = -calculatorInput.value;
        this.renderFirstNumber();
    },
    // Backspace –Ω–µ –≤–µ–∑–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∑–Ω–∞—á–æ–∫
    'ü†ê': function () {
        if (this.isFirstNumber) {
            this.firstNumber = calculatorInput.value = calculatorInput.value.slice(0, -1);
            this.renderFirstNumber();
        } else {
            calculatorInput.value = calculatorInput.value.slice(0, -1);
            this.secondNumber = this.secondNumber.slice(0, -1);
        }
    },

    '%': function () {
        this.firstNumber = calculatorInput.value /= 100;
        this.renderFirstNumber();
    },

    '+': function () {
        if (this.isFirstNumber) {
            this.nextOperation = (a, b) => +a + +b;

        } else {
            this.previosEval();
            this.nextOperation = (a, b) => +a + +b;

        }
    },

    '/': function () {
        if (this.isFirstNumber) {
            this.nextOperation = (a, b) => {
                if (b == 0) {
                    return '–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å'

                } else {
                    return a / b;
                }
            };

        } else {
            this.previosEval();
            this.nextOperation = (a, b) => {
                if (b == 0) {
                    return '–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å'

                } else {
                    return a / b;
                }
            }

        }
    },

    '*': function () {
        if (this.isFirstNumber) {
            this.nextOperation = (a, b) => b ? a * b : a;

        } else {
            this.previosEval();
            this.nextOperation = (a, b) => b ? a * b : a;

        }
    },

    '-': function () {
        if (this.isFirstNumber) {
            this.nextOperation = (a, b) => a - b;

        } else {
            this.previosEval();
            this.nextOperation = (a, b) => a - b;

        }
    },

    '‚àö': function () {
        this.firstNumber = calculatorInput.value = this.firstNumber ** 0.5;
        this.renderFirstNumber();
    },

    previosEval: function () {
        this.result = this.nextOperation(this.firstNumber, this.secondNumber);
        this.firstNumber = this.fixResult(this.result);
        this.secondNumber = '';
        this.renderFirstNumber();
    },

    '=': function () {
        this.previosEval()
        calculatorInput.value = this.firstNumber;
        this.isAfterEqual = true;
    }
}
